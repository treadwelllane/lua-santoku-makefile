<%
  gen = require("santoku.gen")
  vec = require("santoku.vector")
  str = require("santoku.string")
  server = server or {}
%>

<% return gen.ivals(server.envvars or {}):map(function (var)
  return "env " .. var .. ";"
end):concat("\n") %>

pid server.pid;
worker_processes <% return server.workers and tostring(server.workers) or "auto"  %>;

error_log logs/error.log notice;

events {}

http {

  include /etc/nginx/mime.types;

  access_log logs/access.log;

  lua_package_path "lua_modules/share/lua/5.1/?.lua;lua_modules/share/lua/5.1/?/init.lua;<% return os.getenv('OPENRESTY_DIR') %>/lualib/?.lua;";
  lua_package_cpath "lua_modules/lib/lua/5.1/?.so";

  <% return gen.pairs(server.shared_dicts or {}):map(function (n, v)
    return vec("lua_shared_dict", n, v, ";"):concat(" ")
  end):concat("\n") %>

  <% template:push(server.init) %>
  init_by_lua_file scripts/<% return server.init %>;
  <% template:pop() %>

  <% template:push(server.init_worker) %>
  init_worker_by_lua_file scripts/<% return server.init_worker %>;
  <% template:pop() %>

  types_hash_max_size <% return server.types_hash_max_size or "2048" %>;
  types_hash_bucket_size <% return server.types_hash_max_size or "128" %>;

  <% template:push(server.ssl) %>

  ssl_certificate <% return server.ssl_certificate %>;
  ssl_certificate_key <% return server.ssl_certificate_key %>;

  server {
    server_name _;
    listen <% return server.server_port %>;
    listen [::]:<% return server.server_port %>;
    return 301 https://$host$request_uri;
  }

  <% template:pop():push(server.redirect_base_domain) %>

  server {
    server_name <% return server.domain_base %>;
    listen <% return server.server_port_ssl %> ssl;
    listen [::]:<% return server.server_port_ssl %> ssl;
    return 301 https://<% return server.domain %>$request_uri;
  }

  <% template:pop() %>

  server {

    server_name <% return server.domain %>;

    <% template:push(server.ssl) %>
    listen <% return server.server_port_ssl %> ssl;
    listen [::]:<% return server.server_port_ssl %> ssl;
    <% template:pop():push(not server.ssl) %>
    listen <% return server.server_port %>;
    listen [::]:<% return server.server_port %>;
    <% template:pop() %>

    location / {
      limit_except GET { deny all; }
      root public;
      add_header Cross-Origin-Embedder-Policy require-corp;
      add_header Cross-Origin-Opener-Policy same-origin;
      try_files $uri $uri.html $uri/index.html =404;
    }

    <% return gen.ivals(server.routes or {}):map(function (route)
      return str.interp([[
        location = %2 {
          limit_except %1 { deny all; }
          content_by_lua_file scripts/%3;
        }
      ]], route)
    end):concat("\n\n") %>

  }

}
